# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# I'm dumb so i'll just use this but make multiple jobs to build for each target platforms
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake for multi platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  src:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Upload Source Code Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SRC
        path: ${{github.workspace}}
        
  #copy-language:
  #  runs-on: ubuntu-latest
  #
  #  steps:
  #  - uses: actions/checkout@v4
  #
  #  - name: Copy Directories
  #    run: |
  #         dirs=()
  #         for i in ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources/language/*; do
  #             mkdir -p "${{github.workspace}}/out/$i/VidInjector9000Resources/language"
  #             cp -a "$i" "${{github.workspace}}/out/$i/VidInjector9000Resources/language"
  #         done
  #
  #  - name: Upload Artifact
  #    uses: actions/upload-artifact@v4
  #    with:
  #      name: Linux
  #      path: ${{github.workspace}}/bin

  # https://stackoverflow.com/questions/59180385/using-an-array-of-values-to-repeat-a-step-in-github-actions-workflow
  get-languages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.directories }}
    steps:
      - uses: actions/checkout@v4
      
      - id: matrix
        working-directory: ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources/language
        run: |
          echo "directories=$(ls | jq -R -s -c 'split("\n")[:-1]')"
          echo "directories=$(ls | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.matrix.outputs.directories }}"
          
  copy-language:
    needs: [ get-languages ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{fromJSON(needs.get-languages.outputs.directories)}}
    steps:
      - run: |
          echo "${{ matrix.dir }}"
      
      - name: Copy Directories
        working-directory: ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources/language
        run: |
             mkdir -p ${{github.workspace}}/out/VidInjector9000Resources/language
             cp -a ${{matrix.dir}} ${{github.workspace}}/out/VidInjector9000Resources/language
  
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: ${{github.workspace}}/out

  linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Install Dependencies for wxWidgets
      run: |
           sudo apt-get update -y
           sudo apt install -y \
           libgtk-3-dev \
           libcurl4-openssl-dev \
           libsecret-1-dev \
           libwebkitgtk-6.0-dev \
           libwebkit2gtk-4.1-dev \
           libsoup-3.0-dev \
           libgstreamer-plugins-base1.0-dev \
           libsdl1.2-dev \
           libsdl2-dev \
           libnotify-dev \
           libmspack-dev \
           libgspell-1-dev

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    
    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/build
      run: |
           cp 'VidInjector9002.5.out' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (image) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources
      run: |
           cp -a 'image' ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources
    
    - name: (VidInjector9002-CLI) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002-CLI/build
      run: |
           cp 'VidInjector9002-CLI' ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Linux
        path: ${{github.workspace}}/bin

  macOS:
    strategy:
      matrix:
        include:
          - os: macos-15
            artifact: MacOS
          - os: macos-15-intel
            artifact: MacOS-intel
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/build
      run: |
           cp -a 'VidInjector9002.5.app' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (image) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources
      run: |
           cp -a 'image' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS/VidInjector9000Resources
    - name: (VidInjector9002-CLI) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002-CLI/build
      run: |
           cp 'VidInjector9002-CLI' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS/VidInjector9000Resources

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{github.workspace}}/bin

  windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources/image

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    
    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      # https://superuser.com/a/346112
      run: |
           robocopy ${{github.workspace}}/VidInjector9002.5/build/${{env.BUILD_TYPE}} ${{github.workspace}}/bin/VidInjector9000 VidInjector9002.5.exe
           if ($? -le 1) { exit 0 }
        
    - name: (image) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5
      run: |
          robocopy ${{github.workspace}}/VidInjector9002.5/VidInjector9000Resources/image ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources/image /e
          if ($? -le 1) { exit 0 }
          
    - name: (VidInjector9002-CLI) Copy to Output
      run: |
           robocopy ${{github.workspace}}/VidInjector9002-CLI/build/${{env.BUILD_TYPE}} ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources VidInjector9002-CLI.exe
           if ($? -le 1) { exit 0 }

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows
        path: ${{github.workspace}}/bin
    
