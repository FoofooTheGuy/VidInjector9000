# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# I'm dumb so i'll just use this but make multiple jobs to build for each target platforms
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake for multi platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  src:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Upload Source Code Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SRC
        path: ${{github.workspace}}

  linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Install Dependencies for wxWidgets
      run: |
           sudo apt-get update -y
           sudo apt install -y \
           libgtk-3-dev \
           libcurl4-openssl-dev \
           libsecret-1-dev \
           libwebkitgtk-6.0-dev \
           libwebkit2gtk-4.1-dev \
           libsoup-3.0-dev \
           libgstreamer-plugins-base1.0-dev \
           libsdl1.2-dev \
           libsdl2-dev \
           libnotify-dev \
           libmspack-dev \
           libgspell-1-dev

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    
    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/build
      run: |
           cp 'VidInjector9002.5.out' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (VidInjector9000Resources) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5
      run: |
           cp -a 'VidInjector9000Resources' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (VidInjector9002-CLI) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002-CLI/build
      run: |
           cp 'VidInjector9002-CLI' ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Linux
        path: ${{github.workspace}}/bin

  macOS:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-15

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/build
      run: |
           cp -a 'VidInjector9002.5.app' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (VidInjector9000Resources) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5
      run: |
           cp -a 'VidInjector9000Resources' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS
    
    - name: (VidInjector9002-CLI) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002-CLI/build
      run: |
           cp 'VidInjector9002-CLI' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS/VidInjector9000Resources

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MacOS
        path: ${{github.workspace}}/bin
        
  macOS-intel:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-15-intel

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5/build
      run: |
           cp -a 'VidInjector9002.5.app' ${{github.workspace}}/bin/VidInjector9000
    
    - name: (VidInjector9000Resources) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5
      run: |
           cp -a 'VidInjector9000Resources' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS
    
    - name: (VidInjector9002-CLI) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002-CLI/build
      run: |
           cp 'VidInjector9002-CLI' ${{github.workspace}}/bin/VidInjector9000/VidInjector9002.5.app/Contents/MacOS/VidInjector9000Resources

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MacOS-intel
        path: ${{github.workspace}}/bin

  windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Init Submodules
      run: git submodule update --init --recursive

    - name: Make Output Directory
      run: |
           mkdir -p ${{github.workspace}}/bin/VidInjector9000

    - name: (VidInjector9002.5) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002.5) Build
      working-directory: ${{github.workspace}}/VidInjector9002.5
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    
    - name: (VidInjector9002-CLI) Configure CMake
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: (VidInjector9002-CLI) Build
      working-directory: ${{github.workspace}}/VidInjector9002-CLI
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}


    - name: (VidInjector9002.5) Copy to Output
      # https://superuser.com/a/346112
      run: |
           (robocopy ${{github.workspace}}/VidInjector9002.5/build/${{env.BUILD_TYPE}} ${{github.workspace}}/bin/VidInjector9000 VidInjector9002.5.exe) || IF %ERRORLEVEL% LEQ 1 exit /B 0
    
    - name: (VidInjector9000Resources) Copy to Output
      working-directory: ${{github.workspace}}/VidInjector9002.5
      run: |
          (robocopy ${{github.workspace}}/VidInjector9002.5 ${{github.workspace}}/bin/VidInjector9000 VidInjector9000Resources /e) || IF %ERRORLEVEL% LEQ 1 exit /B 0
          
    - name: (VidInjector9002-CLI) Copy to Output
      run: |
           (robocopy ${{github.workspace}}/VidInjector9002-CLI/build/${{env.BUILD_TYPE}} ${{github.workspace}}/bin/VidInjector9000/VidInjector9000Resources VidInjector9002-CLI.exe) || IF %ERRORLEVEL% LEQ 1 exit /B 0

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows
        path: ${{github.workspace}}/bin
    
