bool loadLanguage(std::string LangPath) {
	std::string outstr = "";
	std::error_code error;
	if (!std::filesystem::exists(std::filesystem::path((const char8_t*)&*LangPath.c_str()), error)) {
		//xtd::forms::message_box::show(*this, std::string::format("{} \"{}\"", FailedToFindPath, std::string::format("{}/{}/language/{}/Language.txt", ProgramDir, resourcesPath, Lang)), std::string::format("{} {}", ErrorText, BadValue), xtd::forms::message_box_buttons::ok, xtd::forms::message_box_icon::error);
		return false;
	}
	if(error)
		return false;
	std::vector<std::string> filelines = fileRead(LangPath);
	if (filelines.size() == 0)
		return false;
	std::vector<std::string*> inLangVec = { &inLangLanguage, &inLangErrorText, &inLangMissingVariableError, &inLangFailedToFindVar, &inLangValueNoChange, &inLangBadValue, &inLangBadVersion, &inLangSupportedVersion, &inLangBeANumber, &inLangframeText, &inLanglogFrameText, &inLangbuildFrameText, &inLangaboutFrameText, &inLangupdateAvailable, &inLangdownloadVersion, &inLangfile, &inLangfileNew, &inLangfileOpen, &inLangfileSave, &inLangfileSaveAs, &inLangfileExport, &inLangfileExtract, &inLangfileImportSeed, &inLangoptions, &inLangoptionsShowLog, &inLangoptionsSystemMode, &inLangoptionsLightMode, &inLangoptionsDarkMode, &inLangoptionsDeleteTemp, &inLangoptionsUpdateCheck, &inLanglanguage, &inLanghelp, &inLanghelpAbout, &inLangReturn, &inLangModeText, &inLangSingleVideo, &inLangMultiVideo, &inLangBrowse, &inLangBannerText, &inLangIconText, &inLangShortNameText, &inLangLongNameText, &inLangPublisherText, &inLangCopyrightCheckText, &inLangBannerCustomText, &inLangBannerPreviewText, &inLangFFrewindCheckText, &inLangDimCheckText, &inLangTextTooLongError, &inLangImageInfoError, &inLangCopyFileError, &inLangCLIError, &inLangBuildError, &inLangExtractError, &inLangSeeLog, &inLangFileSaved, &inLangPlayerTitleText, &inLangMoflexFileText, &inLangMenuBannerText, &inLangSplitIntoAPatch, &inLangTitleIDText, &inLangApplicationTitleText, &inLangProductCodeText, &inLangBuild, &inLangCancel, &inLangSuccessfullyBuilt, &inLangSuccessfullyExtracted, &inLangextractingArchive, &inLangclickToCancel, &inLangByMeText, &inLangGitHubLinker, &inLangonlyMultiVideo, &inLangmodeChoiceBoxTip, &inLangbannerBoxTip, &inLangbannerBrowseTip, &inLangiconBoxTip, &inLangiconBrowseTip, &inLangshortnameBoxTip, &inLanglongnameBoxTip, &inLangpublisherBoxTip, &inLangcopyBoxTip, &inLangcopyCheckTip, &inLangiconPreviewTip, &inLangffRewindCheckTip, &inLangdimCheckTip, &inLangmultiBannerPreviewTip, &inLangmultiBannerPreviewLeftTip, &inLangmultiBannerPreviewRightTip, &inLangmoflexFileTip, &inLangplayerTitlesTip, &inLangmoflexFilesTip, &inLangmenuBannersTip, &inLangmultiUpTip, &inLangmultiDownTip, &inLangmoflexBrowseTip, &inLangmultiBannerBrowseTip, &inLangremoveRowTip, &inLangappendRowTip, &inLangsplitPatchTip, &inLangsplitPatchUpTip, &inLangsplitPatchDownTip, &inLangtitleIDBoxTip, &inLangtitleIDButtonTip, &inLangapplicationTitleBoxTip, &inLangproductCodeBoxTip, &inLangbuildButtonTip, &inLangcancelButtonTip, &inLangchooseDirSave, &inLangmoflexFiles, &inLangextractFiles, &inLangvi9pFiles, &inLangciaFiles, &inLangtarFiles, &inLangseeddbFiles, &inLangallFiles, };
	std::vector<std::string*> LangVec = { &Language, &ErrorText, &MissingVariableError, &FailedToFindVar, &ValueNoChange, &BadValue, &BadVersion, &SupportedVersion, &BeANumber, &frameText, &logFrameText, &buildFrameText, &aboutFrameText, &updateAvailable, &downloadVersion, &file, &fileNew, &fileOpen, &fileSave, &fileSaveAs, &fileExport, &fileExtract, &fileImportSeed, &options, &optionsShowLog, &optionsSystemMode, &optionsLightMode, &optionsDarkMode, &optionsDeleteTemp, &optionsUpdateCheck, &language, &help, &helpAbout, &Return, &ModeText, &SingleVideo, &MultiVideo, &Browse, &BannerText, &IconText, &ShortNameText, &LongNameText, &PublisherText, &CopyrightCheckText, &BannerCustomText, &BannerPreviewText, &FFrewindCheckText, &DimCheckText, &TextTooLongError, &ImageInfoError, &CopyFileError, &CLIError, &BuildError, &ExtractError, &SeeLog, &FileSaved, &PlayerTitleText, &MoflexFileText, &MenuBannerText, &SplitIntoAPatch, &TitleIDText, &ApplicationTitleText, &ProductCodeText, &Build, &Cancel, &SuccessfullyBuilt, &SuccessfullyExtracted, &extractingArchive, &clickToCancel, &ByMeText, &GitHubLinker, &onlyMultiVideo, &modeChoiceBoxTip, &bannerBoxTip, &bannerBrowseTip, &iconBoxTip, &iconBrowseTip, &shortnameBoxTip, &longnameBoxTip, &publisherBoxTip, &copyBoxTip, &copyCheckTip, &iconPreviewTip, &ffRewindCheckTip, &dimCheckTip, &multiBannerPreviewTip, &multiBannerPreviewLeftTip, &multiBannerPreviewRightTip, &moflexFileTip, &playerTitlesTip, &moflexFilesTip, &menuBannersTip, &multiUpTip, &multiDownTip, &moflexBrowseTip, &multiBannerBrowseTip, &removeRowTip, &appendRowTip, &splitPatchTip, &splitPatchUpTip, &splitPatchDownTip, &titleIDBoxTip, &titleIDButtonTip, &applicationTitleBoxTip, &productCodeBoxTip, &buildButtonTip, &cancelButtonTip, &chooseDirSave, &moflexFiles, &extractFiles, &vi9pFiles, &ciaFiles, &tarFiles, &seeddbFiles, &allFiles, };
	for (size_t i = 0; i < inLangVec.size(); i++) {
		if (parseLines(outstr, filelines, *inLangVec[i])) {
			*LangVec[i] = outstr;
		}
		else {
			//xtd::forms::message_box::show(*this, std::string::format("{} {}\n{}.", FailedToFindVar, *inLangVec[i], ValueNoChange), std::string::format("{} {}", ErrorText, MissingVariableError), xtd::forms::message_box_buttons::ok, xtd::forms::message_box_icon::error);
		}
	}
	return true;
}